
/*
Leetcode: Unsuccessful 97/110

Approach:

expanded the sequence to 5 times.
because if there is any kind of repitition, it should be over after repeating the sequence 4 times.

formulated a scheme for left and right something like dirs array.

now let the sequence go on and each step save the maxi, maxj, mini and minj.

by the end of 4*length of sequence we would have some values in maxi, maxj, minj and mini.


now check if there is any deviation i.e if j>maxj or less than minj or i> maxi or i<mini.

if yes, then return false.

end the end of the for loop return true.


*/
class Solution {
    public boolean isRobotBounded(String instructions) {
        
 //       String newInstruction = instructions.repeat(4);
   
        StringBuilder newInstructions = new StringBuilder();
     //   newInstruction=instructions*4;
        //= instructions*4;
   
        
        for(int i =0;i<5;i++)
        {
            newInstructions.append(instructions);
        }
        System.out.println(newInstructions);
        int leftcount=3;
        int rightcount=3;
        int go=0;
        int left[][] = new int [][]{{-1,0},{0,-1},{1,0},{0,1}};
        int right[][] = new int [][]{{1,0},{0,-1},{-1,0},{0,1}};
        int start[]= new int[]{0,0};
        boolean lft=false;
        boolean rit=false;
        
        int maxi=0;
        int maxj=0;
        int mini=0;
        int minj=0;
        
        for(int i=0;i<newInstructions.length();i++)
        {            
            if(newInstructions.charAt(i)=='L')
            {
                leftcount++;
                lft=true;
                rit=false;
            }
            if(newInstructions.charAt(i)=='R')
            {
                rightcount++;
                
               // leftcount++;
                lft=false;
                rit=true;
            }
            if(newInstructions.charAt(i)=='G'){
                
                if(lft==false&&rit==false)
                {
                    int temp=0;
                    start[0]=start[0]+left[leftcount%4][0];
                    start[1]=start[1]+left[leftcount%4][1];
                }
                if(lft==true)
                {
                    start[0]=start[0]+left[leftcount%4][0];
                    start[1]=start[1]+left[leftcount%4][1];
                }
                else if(rit==true)
                {
                    start[0]=start[0]+right[rightcount%4][0];
                    start[1]=start[1]+right[rightcount%4][1];
                }
                
                if(i<instructions.length()*4)
                {
                if(start[0]>maxi) maxi=start[0];
                if(start[0]<mini) mini=start[0];
                if(start[1]>maxj) maxj=start[1];
                if(start[1]<minj) minj=start[1];
                }
                if(i>4*instructions.length()){
                
                    if(start[0]>maxi||start[0]<mini) return false;
                    
                    if(start[1]>maxj||start[1]<minj) return false;
                    
                }

                
            } 
        }
        return true;
    }
}
