#robot bounded in circle
#tc: O(n)
#sc: O(1)
class Solution(object):
    def isRobotBounded(self, instructions):
        """
        :type instructions: str
        :rtype: bool
        """
        di = (0,1)
        x,y = 0,0
        for instruction in instructions:
            if instruction == 'G':
                x,y = x+di[0],y+di[1]
            elif instruction == 'L':
                di = (-di[1],di[0])
            else:
                di = (di[1],-di[0])
            
        return (x==0 and y==0) or di!=(0,1)






#tax brackets
#tc: O(n) n - length of brackets
#sc: 0(1)
def calculateTax(salary, brackets): 
	 taxes = 0 
	 for x in brackets: 
		 if x[0] is not None and salary != 0:
			 taxable = min(salary, x[0]) 
			 taxes += taxable * x[1] 
			salary -= taxable 
		else: 
			taxes += salary * x[1] 
			return taxes 
		       calculateTax(Salary, Brackets)
